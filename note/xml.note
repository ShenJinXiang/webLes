dtd 内部声明
	
代码：
<!DOCTYPE 根元素 [元素声明]>

dtd 外部引用
<!DOCTYPE 根元素 SYSTEM "文件名">
<!DOCTYPE 根元素 PUBLIC "文件名" "文件路径">

元素
	声明：
	<!ELEMENT 元素名称 类别> 或者 <!ELEMENT 元素名称 (元素内容)>
	空元素：
	<!ELEMENT 元素名称 EMPTY>
	任意内容：
	<!ELEMENT 元素名称 ANY>
	PCDATA
	<!ELEMENT 元素名称 (#PCDATA)>

	元素内容用 , 分割表示子元素必须按照相同的顺序出现在文档中
			   | 分割表示 二者取其一
	+		出现一次或多次
	*		出现零次或多次
	?		出现零次或一次

属性
	声明：
	<!ATTLIST 元素名称 属性名称 属性类型 默认值>
	默认值参数：
	#REQUIRED		属性值是必需的
	#IMPLIED		不是必需的
	#FIXED value	属性值是固定的
	枚举属性值：
	<!ATTLIST 元素名称 属性名称 (en1|en2|..) 默认值>

实体
	

调整jvm内存
	默认64M 内存空间
public static main(String[] args){
	byte b[] = new byte[1024 * 1024 * 1024];	// 开辟1G内存空间
	byte b[] = new byte[1024 * 1024 * 55];	
}

xml解析开发包
	Jaxp(sun)	Jdom	dom4j(性能最好)

	Jaxp javax.xml.parsers DocumentBuilderFactory 创建解析器对象

public static main(String[] args){
	// 创建工厂
	DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();

	// 得到dom解析器
	DocumentBuilder builder = factory.newDocumentBuilder();

	// 解析xml文档，得到代表文档的document
	Document document = builder.parse(".../../.xml");
}

Document 写入到xml文件
TransformerFactory tffactory = TransformerFactory.newInstance();
Transformer tf = tffactory.newTransformer();
tf.transform(new DOMSource(document), new StreamResult(new FileOutputStream("")));


SAX解析
解析器和事件处理器

public staitc void main(String[] args) {
	// 创建解析工厂
	SAXParserFactory factory = SAXParserFactory.newInstance();

	// 得到解析器
	SAXParser sp = factory.newSAXParser();

	//得到读取器
	XMLReader reader = sp.getXMLReader();

	//设置内容处理器
	reader.setContentHandler(handler);

	//读取xml文档内容
	reader.parse("...xml");
}

// 得到xml文档内容
class ListHandler implenments ContentHandler() {
}

dom4j解析

// 获取document对象
SAXReader reader = new SAXReader();
Document document = reader.read(new File("src/xml/books.xml"));
Element root = document.getRootElement();

// 写入文件
XMLWriter write = new XMLWriter(new FileWriter("*.xml")); // OutputStreamWriter
write.write(document);
write.close();

// 格式化输出
OutputFormat format = OutputFormat.createPrettyPrint();
format.setEncoding("utf-8");
XMLWriter write = new XMLWriter(new OutputStreamWriter(new FileOutputStream("src/xml/books.xml"), "utf-8"), format);
