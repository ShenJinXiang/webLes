线程安全问RR
	当多个客户的并发访问同一个Servlet时，服务器会为每一个客户端访问请求创建一个线程，如果service方法调用统一资源的话， 可能引发线程安全问题。

ServletConfig
	servlet配置文件中， <init-param>初始化参数
ServletContext
	代表当前web应用 context域对象
	this.getServletConfig().getServletContext();	// 方式1
	this.getServletContext();		// 方式2
	多个servlet之间通话

	<Context-param>标签之间配ServletContext对象
	实现Servlet转发
		RequestDispatcher rd = this.getServletContext().getRequestDispatcher("*.jsp");
		rd.forward(request, response);
	管理资源文件 (xml properties)
		得到文件路径
			this.getServletContext().getResourceAsStream("/");

	注意：普通java对象中，需要通过类装载器读文件, 但是文件不能太大，容易内存溢出
	1. InputStream in = UserDao.class.getClassLoder().getResourceAsStream("*.properties");
	2. String path = UserDao.class.getClassLoder().getResource("*.properties").getPath();

HttpServletResponse
	response.setHeader("Content-type", "text/html;charset=UTF-8");	// 控制浏览器编码
	response.getOutputStream()
	
	<meta> 可以模拟http响应头
	<meta http-equiv='content-type' content='text/html;charset=utf-8'

	文件下载功能{
		String path = this.getServletContext().getRealPath("");// 资源路径

		response.setHeader("content-dispsition", "attachment;filename="+filename);//设置http响应头 为下载

		response.setHeader("content-dispsition", "attachment;filename="+URLEncoder.encode(filename, "utf-8"));//如果文件名为中文，需要转码
	}

	控制浏览器定时刷新
		response.setHeader("refresh", "3");

	response控制浏览器缓存
		response.setDateHeader("Expries", System.currentTimeMillis() + 1000 * 3600);// 一个小时内不要缓存
	
	response请求重定向
		response.setStatus(302);
		response.setHeader("location",	"");
		或
		response.setRedirect("");
		发送了两次请求 尽量少用 因为要加重服务器负担
		必须要请求重定向的地方举例：登录、购物
	
	response 的 getOutputStream 和 getWriter方法在一个response中只能用一次

HttpSerlvetRequest
	request.getRequestURI();
	request.getRequestURL();
	request.getQueryString();
	request.getRemoteAddr();
	request.getRemoteHost();
	request.getRemotePort();
	request.getMethod();

	request.getParameterMap();

	request中文乱码
		// post 方式提交
		request.setCharacterEncoding("UTF-8");

		// get方式提交
		String name = request.getParameter("name");
		String val = new String(name.getBytes("ISO9005-1"), "IUTF-8");
	
	request 实现包含
		request.getRequestDispatcher("*.jsp").include(req, resp);
	
	Web中的地址
		1. 尽量以“／”开头，如果服务器使用代表当前web应用
		2. 浏览器使用 /day06/...
	
	referer防盗链
		String referer = request.getHeader("referer");

会话
	用户开一个浏览器，点击多个超链接，访问服务器多个web资源，然后关闭浏览器，整个过程称为一个会话

Cookie
	客户端技术，程序吧每个用户的数据以cookie的形式写给各自的浏览器，当防伪服务器中的web资源时，web服务器可以获取到用户各自的数据。

Session
	服务器端技术，服务器可以在运行时为每个用户的浏览器创建一个独享的session对象
	request.getCookies() // 获取所有cookie
	setMaxAge() getMaxAge() // 设置cookie有效期，秒为单位，如果不设置，cookie有效期为浏览器进程
	setPath getPath	// cookie有效目录 默认为设置cookie的servlet的目录
	setDomain  getDomain	//设置cookie有效域
	
	显示上次访问时间
		PritWriter out = response.getWrite();
		out.prit("你上次访问时间是：");
		// 获得用户的时间cookie
		Cookie cookies[] = request.getCookies();
		for(int i = 0; cookies != null && i < cookies.length; i++){
			if(cookies[i].getName().equals("lastAccessTime")) {
				long cookieValue = Long.parseLong(cookies[i].getValue()); // 得到用户访问时间
				Date date = new Date(cookieValue);
				out.print(date.toLocalString());
			}
		}
		
		//给用户回送最新的访问时间
		Cookie cookie = new Cookie("lastAccessTime", System.currentTimeMillis() + ""); 
		cookie.setMaxAge(30 * 24 * 3600);	// 一个月有效期
		cookie.setPath("/day07");
		response.addCookie(cookie);
	session的一些细节
		浏览器新建标签页的时候共享session
		弹出窗口也共享session 

域对象总结
	request 数据显示完了就没用了
	session	显示用完等会还要用
	servletContext	不仅等会还要用，用户还要共享数据
