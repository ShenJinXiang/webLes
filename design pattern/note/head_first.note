1. 找出应用中可能需要变化之处，吧它们独立出来，不要和那些不需要变化的代码混在一起
2. 多用组合，少用继承
3. 为了交互对象之间的松耦合设计而努力
4. 类应该对扩展开放，对修改关闭

1. 策略模式
	定义了算法族，分别封装起来，让它们之间可以互相替换，此模式让算法的变化独立于使用算法的客户。

2. 观察者模式
	定义了对象之间的一对多依赖，这样一来，当一个对象改变状态时，它的所有依赖者都会收到通知并自动更新。

3. 装饰者模式
	动态地将责任附加道对象上。若要扩展功能，装饰者提供了比继承更有弹性的替代方案。

4. 单例模式
	确保一个类直邮一个实例，并提供一个全局访问点。
5. 适配器模式
	将一个类的接口，转换成客户期望的另一个接口。适配器让原本接口不兼容的类可以合作无间。
